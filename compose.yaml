services:
  ms-get:
    build:
      context: ./ms-get
      dockerfile: Dockerfile
    container_name: ms-get
    depends_on:
      ms-db:
        condition: service_healthy
    environment:
      - POSTGRES_URL=jdbc:postgresql://ms-db:5432/macbook
      - POSTGRES_USER=macbook
      - POSTGRES_PASSWORD=macbook
    networks:
      - backend

  ms-post:
    build:
      context: ./ms-post
      dockerfile: Dockerfile
    container_name: ms-post
    depends_on:
      ms-db:
        condition: service_healthy
    environment:
      - POSTGRES_URL=jdbc:postgresql://ms-db:5432/macbook
      - POSTGRES_USER=macbook
      - POSTGRES_PASSWORD=macbook
    networks:
      - backend


  ms-put:
    build:
      context: ./ms-put
      dockerfile: Dockerfile
    container_name: ms-put
    depends_on:
      ms-db:
        condition: service_healthy
    environment:
      - POSTGRES_URL=jdbc:postgresql://ms-db:5432/macbook
      - POSTGRES_USER=macbook
      - POSTGRES_PASSWORD=macbook
    networks:
      - backend


  ms-delete:
    build:
      context: ./ms-delete
      dockerfile: Dockerfile
    container_name: ms-delete
    depends_on:
      ms-db:
        condition: service_healthy
    environment:
      - POSTGRES_URL=jdbc:postgresql://ms-db:5432/macbook
      - POSTGRES_USER=macbook
      - POSTGRES_PASSWORD=macbook
    networks:
      - backend

  ms-db:
    build:
      context: ./ms-db
      dockerfile: Dockerfile
    container_name: ms-db
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    environment:
      - POSTGRES_DB=macbook
      - POSTGRES_USER=macbook
      - POSTGRES_PASSWORD=macbook
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "macbook" ]
      interval: 10s
      timeout: 5s
      retries: 5

  ms-api-gateway:
    build:
      context: ./ms-api-gateway
      dockerfile: Dockerfile
    depends_on:
       - ms-get
       - ms-delete
       - ms-post
       - ms-put
    ports:
       - 8080:7000
    volumes:
      - ./ms-api-gateway/nginx/logs:/var/log/nginx/
    networks:
       - backend
       - frontend
    environment:
       - SERVER=server
networks:
  backend:
  frontend:

volumes:
  db-data: